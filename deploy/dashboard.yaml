# Copyright 2017 The Kubernetes Authors.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

#apiVersion: v1
#kind: Namespace
#metadata:
#  name: kubernetes-dashboard

---

apiVersion: v1
kind: ServiceAccount
metadata:
  labels:
    k8s-app: kubernetes-dashboard
  name: kubernetes-dashboard
  namespace: kube-system

---

kind: Service
apiVersion: v1
metadata:
  labels:
    k8s-app: kubernetes-dashboard
  name: kubernetes-dashboard
  namespace: kube-system 
spec:
  ports:
    - port: 443
      targetPort: 8443
  selector:
    k8s-app: kubernetes-dashboard

---

apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: dashboard-ingress
  namespace: kube-system
  annotations:
    nginx.ingress.kubernetes.io/rewrite-target: /
    nginx.ingress.kubernetes.io/secure-backends: "true"
    nginx.ingress.kubernetes.io/ssl-passthrough: "true"
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
spec:
  ingressClassName: nginx
  rules:
  - host: dashboard.yun-paas.com
    http:
      paths:
      - pathType: ImplementationSpecific
        path: "/"
        backend:
          service:
            name: kubernetes-dashboard
            port: 
              number: 443

---

apiVersion: v1
kind: Secret
metadata:
  labels:
    k8s-app: kubernetes-dashboard
  name: kubernetes-dashboard-certs
  namespace: kube-system 
type: Opaque
data:
  crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUhtekNDQllPZ0F3SUJBZ0lRREY3Q3lwUEk4OEFTSkF3RWVUZjRKekFOQmdrcWhraUc5dzBCQVFzRkFEQmMKTVFzd0NRWURWUVFHRXdKVlV6RVhNQlVHQTFVRUNoTU9SR2xuYVVObGNuUXNJRWx1WXk0eE5EQXlCZ05WQkFNVApLMUpoY0dsa1UxTk1JRWRzYjJKaGJDQlVURk1nVWxOQk5EQTVOaUJUU0VFeU5UWWdNakF5TWlCRFFURXdIaGNOCk1qTXhNakU0TURBd01EQXdXaGNOTWpRd09UQXhNak0xT1RVNVdqQVpNUmN3RlFZRFZRUUREQTRxTG5sMWJpMXcKWVdGekxtTnZiVENDQVNJd0RRWUpLb1pJaHZjTkFRRUJCUUFEZ2dFUEFEQ0NBUW9DZ2dFQkFMUFR2YjdMemVIVAp4d0JkbWNudWlmQ0RUM0lGUzl1cnI5TURvTytZaTRhbjdyNGNBOHhHQ0RvaGVaYlhseU1hdEIzV1M2ZDJjVy9SCk5xeTVsVFVRclAwVEl5a0sxUGlGYTd3SG9aYUNmZ2Z5VVREcHBiRExUNzU3Qm5ndWlaNFZqYnVHS2ZybVIxaXkKVjJNVUppcnl0aEJsbUdpTXhiUEFlM1hqNjg5ai9maVJENE0wWHgxVnc0ZkR0UjM5ME84ZHc4ZXZRVEpqZ1U2egpFQ0YxU2UyQSt1cCtWSUxicEo2dTlFdDJqb01RQzNjZ2k4YTMvdHFuQUUrZ09pejE2V2ozUzdZWjZaeDJsT1pQCmpqM0NNUCtWUjhEZ1FTcEJVajh1OVpydmcxVHJvbWhGSllNUWZaZG8vbTBaYjRYQ05lYW9RVFlud09xRlNMN2EKMWVIL3MvTnJrbWNDQXdFQUFhT0NBNW93Z2dPV01COEdBMVVkSXdRWU1CYUFGUENjaGYyaW4zMlB5V2k3MWRTSgpUUjIrMDVEL01CMEdBMVVkRGdRV0JCU2I0VGlFYXFOWmNjMmNVOWRZWWdzaHRCQnRiekFuQmdOVkhSRUVJREFlCmdnNHFMbmwxYmkxd1lXRnpMbU52YllJTWVYVnVMWEJoWVhNdVkyOXRNRDRHQTFVZElBUTNNRFV3TXdZR1o0RU0KQVFJQk1Da3dKd1lJS3dZQkJRVUhBZ0VXRzJoMGRIQTZMeTkzZDNjdVpHbG5hV05sY25RdVkyOXRMME5RVXpBTwpCZ05WSFE4QkFmOEVCQU1DQmFBd0hRWURWUjBsQkJZd0ZBWUlLd1lCQlFVSEF3RUdDQ3NHQVFVRkJ3TUNNSUdmCkJnTlZIUjhFZ1pjd2daUXdTS0JHb0VTR1FtaDBkSEE2THk5amNtd3pMbVJwWjJsalpYSjBMbU52YlM5U1lYQnAKWkZOVFRFZHNiMkpoYkZSTVUxSlRRVFF3T1RaVFNFRXlOVFl5TURJeVEwRXhMbU55YkRCSW9FYWdSSVpDYUhSMApjRG92TDJOeWJEUXVaR2xuYVdObGNuUXVZMjl0TDFKaGNHbGtVMU5NUjJ4dlltRnNWRXhUVWxOQk5EQTVObE5JClFUSTFOakl3TWpKRFFURXVZM0pzTUlHSEJnZ3JCZ0VGQlFjQkFRUjdNSGt3SkFZSUt3WUJCUVVITUFHR0dHaDAKZEhBNkx5OXZZM053TG1ScFoybGpaWEowTG1OdmJUQlJCZ2dyQmdFRkJRY3dBb1pGYUhSMGNEb3ZMMk5oWTJWeQpkSE11WkdsbmFXTmxjblF1WTI5dEwxSmhjR2xrVTFOTVIyeHZZbUZzVkV4VFVsTkJOREE1TmxOSVFUSTFOakl3Ck1qSkRRVEV1WTNKME1Bd0dBMVVkRXdFQi93UUNNQUF3Z2dHQUJnb3JCZ0VFQWRaNUFnUUNCSUlCY0FTQ0FXd0IKYWdCM0FPN04wR1RWMnhyT3hWeTNuYlRORTZJeWgwWjh2T3pldzFGSVdVWnhIN1diQUFBQmpIMzVGY2NBQUFRRApBRWd3UmdJaEFOK29KVTdnT24wanFlNjBaanBsaEVOazMzSTNzanA0cVdmZzFQMjMzcGRTQWlFQTFiMXNIR0pxCjNuT084OGt4djdlUjIwMnBlVmcxSFl0K00zQm03NWx3cmpvQWR3QklzT05yMnFaSE5BL2xhZ0w2blREckhGSUIKeTFiZExJSFp1NytyT2RpRWN3QUFBWXg5K1JXY0FBQUVBd0JJTUVZQ0lRRERoSTlhRjdydno1QjZtdzlkRHljbgprZ1QwZ1pEVElWSzFpUWJ4Ym5WZUlBSWhBTG1YUlp4RUNzMWV3U2ZBUnBvSE90Q3V3YkNlQ0VJWkhWc1VvYXFKClhGZFBBSFlBMnJhL2F6KzF0aUtmbThLN1hHdm9jSkZ4Ykx0UmhJVTB2YVE5TUVqWCs2c0FBQUdNZmZrV0NnQUEKQkFNQVJ6QkZBaUVBdWY0dlZvYlVEU0xOS1FFUnZ2aWpMUEhZdkpPUTZreTB5NWlkak1TM2d3a0NJRXZLaE9PNQpyK0tYQVpvMlpXTXNiMWJYb0N5dnE3V1JwVjRCTHloTmdGKytNQTBHQ1NxR1NJYjNEUUVCQ3dVQUE0SUNBUUFOCjV1MVZlcWx1TWp1aGtWUTh5eWZYMGgvMHdzL1pvTUc3eW1LcEcxY2ZyYU9zYkg5ckpuWWtqU2JUblQ0WVdkaXQKTzZ4ekZQbTd6anZrSzFKUDFvaU1QTFNCVW1Za3o0Rm4xSXQzeUZtdEFQZTUrVG9qWjFmTVh6ODRlU0dPLy9BVgp0NW51MTRlMUZYcFVsdzRkd05tclFKNCs1WGNNbXZjVmdoZnIwMW1KQm9LZHNjYTZsUFloenp1dEt6SHpsQTFTCmJscjhKdzdYRWx4dnZZTVBEdm4vV0JZV01BUnVER1JtdkRoc3ZwU2c0TDJXMUlCbm5VbHBsRExJMHZIS0pqWkkKNVRRYWN3U1Y5TU54WFdUNXQ0ajJBR2ZLWTU3dSttWVd0N3F0cjZNTzlmYkkvQld4TDdwK1p1TzJCMzFRbVlENgpZbkNsMCs4TGZ5Mkl3eGpMM3o2T3FJeW1VZmRnb09tb1RJTXEveDBZUFJoQllYYXo4dkQ1T0NRZys0RHE4MlE2CjlRWXBiRlg3NnhpbXYySC9xT2ZPSjAwcENVMFJBaGw1cysyYVYzVWZML1lUcGNLNXR4dW90b0NKVFBzbFRyZGMKK2JiT0dJRUdpZGFhRTJzNFhzZFlPbHdsZjhWOTIvY00xbUo5NGNVd0tyYzJyNVM3eHNOU1BuS09OL3BpaDJIMgpPNXphdmUvSTZWRXdaaVBzamh4T2tCRzNMcFBVNEpLUStwbVRwUmNJYlJaZVl0OHhmTG5MZkRtWEFuSitYZ0RqCnBOa0E3V1hSV244TVNFMmFHOVJXZjdKaHVyeFNYNTBXbUVGRC9IL1kzcCtscG9TU3ZuMklDZlBLWG5uY29LMVYKMy8xQmo0aUdpVWhWVnpQYXBwUTI2NE5TSjd0WE9xcm1mWTVsc1R6ODB3PT0KLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQ==
  key: LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFb3dJQkFBS0NBUUVBczlPOXZzdk40ZFBIQUYyWnllNko4SU5QY2dWTDI2dXYwd09nNzVpTGhxZnV2aHdECnpFWUlPaUY1bHRlWEl4cTBIZFpMcDNaeGI5RTJyTG1WTlJDcy9STWpLUXJVK0lWcnZBZWhsb0orQi9KUk1PbWwKc010UHZuc0dlQzZKbmhXTnU0WXArdVpIV0xKWFl4UW1LdksyRUdXWWFJekZzOEI3ZGVQcnoyUDkrSkVQZ3pSZgpIVlhEaDhPMUhmM1E3eDNEeDY5Qk1tT0JUck1RSVhWSjdZRDY2bjVVZ3R1a25xNzBTM2FPZ3hBTGR5Q0x4cmYrCjJxY0FUNkE2TFBYcGFQZEx0aG5wbkhhVTVrK09QY0l3LzVWSHdPQkJLa0ZTUHk3MW11K0RWT3VpYUVVbGd4QjkKbDJqK2JSbHZoY0kxNXFoQk5pZkE2b1ZJdnRyVjRmK3o4MnVTWndJREFRQUJBb0lCQUJlS09VVjNvbHpVZnpGaQpEMWFxdmkzWTBwYUhjUFd4bE5PWG53S2VRbTEvSURhTXJrYVlTRTFyd21Ibm1PWkVnWjJDUnVjR0R6Vm0rclJECm11K1dYajdHdVl5TzJYQXE3djV2TlV6aGlpUDZLWHl3cVRycWNtYnA3ZC9mbjY0cy9oKzFJVnV4dDFjNkNVeHoKLzhjUmZKbks0dGVVemZDSTJ1Q0UxSUtTZ1ZWL1YwRFN6SXg0aTlRaDNML1ZQNC8ramNSa3BOTjhVb0ZWUlY0bwpPU3VkRS9hMURNM2tLcnVMSVVFenJMTG5ZcEhKNWFjSk1sTWxaVXN4U3ZqWk5IUExsV09yc3lJcHF4SWdrb1lLCjZvOWhWbW9sdS9rdXZJN0dhSURYQ1NaMVhNYkpBOEp5V1JUeEFHVUtTWFpXdU1qY3VNUU1seHk5blhzak5zOS8KVVozbERja0NnWUVBN2lENk1TNnJCcTdqZFFtRzNsUUFkMEdOM1lPeTFubldpYkNmRW5STmx6WktTMmdzUERhdwp3UHhRbDhqTkpWOEx2My9paE83czY3bTBTcmlFdWEzYUk2eEpJZVQwWHgxNDBCam9nd3ZPZUJXYWN3TE05c0lsCkdGZUtLdE5tUFFONW4xWVJKQ0FOV3VFdWZTQzRyZTFsT1hBWHVHR0tvREFnMlI0N2NFd3RhVTBDZ1lFQXdWS20KS1E5dHc5Yml5azh3d0dDZnZPOFlxMktBM1FoOTZSUitSSDBhTjRSUEpTZm53ZStQeEhqdFJTa1Y4ZmNmcFl2RQovbDhvVThVVTVyVVp6aGZxaXE3TXlaSXZML2pGNUxXSWFBY09kc0tpR1Fhaml1dFVUcjBSamU5b1dyeUFmVVVFCkJNVlVCUUQyQUt0bEtzUFZJNzJxdUg1VmswSkk1T2F0QzR3UmNJTUNnWUJzWmZTZU9Oay90SkwwTHY4RzdBUSsKUlVnWUF5Q0F3M3VtdUJEaGJMSDVXSXhmWVM5cHhaZVdjZ1VaNHgySG1vbVZoZGlPbk5pYXdiRlJwa2M4NHVmKwoveWxYVllyc1ZWVXVuWGdTVjJpSWY0VU1QOFVmdXViNStyZDVvVHZVSUdYWDQyendIZXNXYUpVcC9xQXpCSExrCnY2TDhtdUpvNHgvQTFpTkdqbGJKclFLQmdRQ2tCbkR1dzZWNUZUaWxPRjEvekR1Yi9TMXNOSTVyZTRvQkdaOHMKa3d5TWNCa0t5SG50NVVtUkJKMGtJZ0Q1cEpoWVNHZWkvNi9pcTRQWlgyeituUEltS3J1Y2h3aThaaEhaeEdCeApDeE90bGVRYzRiSWU2eDVFRkV6eHBXQmdKREhNbDZNYVBTYlZmQVE5ZXk3Q0F4Z3pVL2ltd3FIdTZMMmFZVklQClN3OTg2d0tCZ0VsaW5iM3Q2SWFVT09lMExobVd5aFA1R25leGlLRHAvbmxKckw2R3hZRWsxdzlPNFBDSU9zbGMKRHBTdkNNRXNSa1N2RjV4SGZYeklCd2N2ZWxTeEg4SU0rOXN1YXFSRG1CS2NGK2RWNW9ZUW0xa1BleFpUVkFXWAp1NkZNRmZQTjhWSjIvK1hYRDdYbGpCRnAyaHo3WVpmekpod09tVkowcmNCcVdMa0Nad3I1Ci0tLS0tRU5EIFJTQSBQUklWQVRFIEtFWS0tLS0t

---

apiVersion: v1
kind: Secret
metadata:
  labels:
    k8s-app: kubernetes-dashboard
  name: kubernetes-dashboard-csrf
  namespace: kube-system 
type: Opaque
data:
  csrf: ""

---

apiVersion: v1
kind: Secret
metadata:
  labels:
    k8s-app: kubernetes-dashboard
  name: kubernetes-dashboard-key-holder
  namespace: kube-system 
type: Opaque

---

kind: ConfigMap
apiVersion: v1
metadata:
  labels:
    k8s-app: kubernetes-dashboard
  name: kubernetes-dashboard-settings
  namespace: kube-system 

---

kind: Role
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  labels:
    k8s-app: kubernetes-dashboard
  name: kubernetes-dashboard
  namespace: kube-system
rules:
  # Allow Dashboard to get, update and delete Dashboard exclusive secrets.
  - apiGroups: [""]
    resources: ["secrets"]
    resourceNames: ["kubernetes-dashboard-key-holder", "kubernetes-dashboard-certs", "kubernetes-dashboard-csrf"]
    verbs: ["get", "update", "delete"]
    # Allow Dashboard to get and update 'kubernetes-dashboard-settings' config map.
  - apiGroups: [""]
    resources: ["configmaps"]
    resourceNames: ["kubernetes-dashboard-settings"]
    verbs: ["get", "update"]
    # Allow Dashboard to get metrics.
  - apiGroups: [""]
    resources: ["services"]
    resourceNames: ["heapster", "dashboard-metrics-scraper"]
    verbs: ["proxy"]
  - apiGroups: [""]
    resources: ["services/proxy"]
    resourceNames: ["heapster", "http:heapster:", "https:heapster:", "dashboard-metrics-scraper", "http:dashboard-metrics-scraper"]
    verbs: ["get"]

---

kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  labels:
    k8s-app: kubernetes-dashboard
  name: kubernetes-dashboard
rules:
  # Allow Metrics Scraper to get metrics from the Metrics server
  - apiGroups: ["metrics.k8s.io"]
    resources: ["pods", "nodes"]
    verbs: ["get", "list", "watch"]

---

apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  labels:
    k8s-app: kubernetes-dashboard
  name: kubernetes-dashboard
  namespace: kube-system 
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: kubernetes-dashboard
subjects:
  - kind: ServiceAccount
    name: kubernetes-dashboard
    namespace: kube-system 

---

apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: kubernetes-dashboard
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: kubernetes-dashboard
subjects:
  - kind: ServiceAccount
    name: kubernetes-dashboard
    namespace: kube-system 

---

kind: Deployment
apiVersion: apps/v1
metadata:
  labels:
    k8s-app: kubernetes-dashboard
  name: kubernetes-dashboard
  namespace: kube-system 
spec:
  replicas: 1
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      k8s-app: kubernetes-dashboard
  template:
    metadata:
      labels:
        k8s-app: kubernetes-dashboard
    spec:
      securityContext:
        seccompProfile:
          type: RuntimeDefault
      containers:
        - name: kubernetes-dashboard
          image: capitalonline/dashboard:v2.7.0
          imagePullPolicy: Always
          ports:
            - containerPort: 8443
              protocol: TCP
          args:
            #- --auto-generate-certificates
            #- --namespace=kubernetes-dashboard
            - --tls-cert-file=/crt
            - --tls-key-file=/key
            - --namespace=kube-system
            # Uncomment the following line to manually specify Kubernetes API server Host
            # If not specified, Dashboard will attempt to auto discover the API server and connect
            # to it. Uncomment only if the default does not work.
            # - --apiserver-host=http://my-address:port
          volumeMounts:
            - name: kubernetes-dashboard-certs
              mountPath: /certs
              # Create on-disk volume to store exec logs
            - mountPath: /tmp
              name: tmp-volume
          livenessProbe:
            httpGet:
              scheme: HTTPS
              path: /
              port: 8443
            initialDelaySeconds: 30
            timeoutSeconds: 30
          securityContext:
            allowPrivilegeEscalation: false
            readOnlyRootFilesystem: true
            runAsUser: 1001
            runAsGroup: 2001
      volumes:
        - name: kubernetes-dashboard-certs
          secret:
            secretName: kubernetes-dashboard-certs
        - name: tmp-volume
          emptyDir: {}
      serviceAccountName: kubernetes-dashboard
      nodeSelector:
        "kubernetes.io/os": linux
        node-role.kubernetes.io/infra: ""
      # Comment the following tolerations if Dashboard must not be deployed on master
      tolerations:
        - key: node-role.kubernetes.io/control-plane 
          effect: NoSchedule
        - effect: NoSchedule
          key: node-role.cck.net/infra

---

kind: Service
apiVersion: v1
metadata:
  labels:
    k8s-app: dashboard-metrics-scraper
  name: dashboard-metrics-scraper
  namespace: kube-system 
spec:
  ports:
    - port: 8000
      targetPort: 8000
  selector:
    k8s-app: dashboard-metrics-scraper

---

kind: Deployment
apiVersion: apps/v1
metadata:
  labels:
    k8s-app: dashboard-metrics-scraper
  name: dashboard-metrics-scraper
  namespace: kube-system 
spec:
  replicas: 1
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      k8s-app: dashboard-metrics-scraper
  template:
    metadata:
      labels:
        k8s-app: dashboard-metrics-scraper
    spec:
      securityContext:
        seccompProfile:
          type: RuntimeDefault
      containers:
        - name: dashboard-metrics-scraper
          image: capitalonline/metrics-scraper:v1.0.8
          ports:
            - containerPort: 8000
              protocol: TCP
          livenessProbe:
            httpGet:
              scheme: HTTP
              path: /
              port: 8000
            initialDelaySeconds: 30
            timeoutSeconds: 30
          volumeMounts:
          - mountPath: /tmp
            name: tmp-volume
          securityContext:
            allowPrivilegeEscalation: false
            readOnlyRootFilesystem: true
            runAsUser: 1001
            runAsGroup: 2001
      serviceAccountName: kubernetes-dashboard
      nodeSelector:
        "kubernetes.io/os": linux
        node-role.kubernetes.io/control-plane: ""
        node-role.kubernetes.io/infra: ""
      # Comment the following tolerations if Dashboard must not be deployed on master
      tolerations:
        - key: node-role.kubernetes.io/control-plane
          effect: NoSchedule
        - effect: NoSchedule
          key: node-role.cck.net/infra
      volumes:
        - name: tmp-volume
          emptyDir: {}

